
                    Nyquest Technology Co., Ltd.

NYASM 2.42

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ISO C Compiler 
                                    1-    3     ; Version 4.2.2 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A054E,c=on
                                    1-    9     	#include "ny8a054e.inc"
                                    2-    1     #include "common.inc"
                                    3-    1     ;; header file for 8 bit series assembly -*- mode:asm; coding:utf-8; -*-
                                    3-    2     ;; author    Ting
                                    3-    3     ;; date      2020-12-24
                                    3-    4     ;;
                                    3-    5     ;; # constant definition
                                    3-    6     ;;
                                    3-    7     ;; ## instruction result store destination
                                    3-    8     ;;  - W: the result is stored in the ACC.
                                    3-    9     ;;  - F: the result is stored back in register.
                                    3-   10     ;; ## flag name in STATUS register
                                    3-   11     ;;  - C, DC, Z
                                    3-   12     ;;
                                    3-   13     ;; # macro define
                                    3-   14     ;;
                                    3-   15     ;; ## RETURN, used by C compiler, end of function
                                    3-   16     ;; ## PAGESEL, empty macro, maybe used by C compiler (bug?)
                                    3-   17     ;; ## BANKSEL, replace by .banksel pseudo command, empty if disable bank.
                                    3-   18     ;; ## MGOTO, replace by LGOTO (ic<=2K word) or FGOTO (ic>2K word)
                                    3-   19     ;; ## MCALL, same as above
                                    3-   20     ;;
                                    3-   21     W       EQU 0
                                    3-   21     ;W = 0
                                    3-   22     F       EQU 1
                                    3-   22     ;F = 1
                                    3-   23     C		EQU	0
                                    3-   23     ;C = 0
                                    3-   24     DC		EQU	1
                                    3-   24     ;DC = 1
                                    3-   25     Z		EQU	2
                                    3-   25     ;Z = 2
                                    3-   28     ;; common register for all series
                                    3-   29     INDF    EQU 0x00
                                    3-   29     ;INDF = 0
                                    3-   30     PCL     EQU 0x02
                                    3-   30     ;PCL = 2
                                    3-   31     STATUS  EQU 0x03
                                    3-   31     ;STATUS = 3
                                    3-   32     FSR     EQU 0x04
                                    3-   32     ;FSR = 4
                                    3-   33     PCHBUF  EQU 0x0A
                                    3-   33     ;PCHBUF = 10
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_send_ble_packet
                                    1-   15     	extern	_Check_Keydown
                                    1-   16     	extern	_led
                                    1-   17     	extern	_led_open
                                    1-   18     	extern	_set_PB_low
                                    1-   19     	extern	_set_PA_low
                                    1-   20     	extern	_key_init
                                    1-   21     	extern	_delay_40us
                                    1-   22     	extern	_delay_us
                                    1-   23     	extern	_delay_250ms
                                    1-   24     	extern	_delay_ms
                                    1-   25     	extern	_CS1630_Dump_RF_Register
                                    1-   26     	extern	_Enter_sleep
                                    1-   27     	extern	_CS1630_SendPack
                                    1-   28     	extern	_CS1630_wr_buffer
                                    1-   29     	extern	_CS1630_write_byte
                                    1-   30     	extern	_CS1630_read_byte
                                    1-   31     	extern	_CS1630_read_buffer
                                    1-   32     	extern	_CS1630_Bank_Switch
                                    1-   33     	extern	_CS1630_ModeSwitch
                                    1-   34     	extern	_CS1630_CE_Low
                                    1-   35     	extern	_CS1630_CE_High
                                    1-   36     	extern	_CS1630_Flush_Tx
                                    1-   37     	extern	_CS1630_Clear_All_Irq
                                    1-   38     	extern	_CS1630_Init
                                    1-   39     	extern	_CS1630_Soft_Rst
                                    1-   40     	extern	_SPI_ReadByte
                                    1-   41     	extern	_SPI_SendByte
                                    1-   42     	extern	_RF_softSPI_Init
                                    1-   43     	extern	_RF_Init
                                    1-   44     	extern	_RF_wr_cmd
                                    1-   45     	extern	_RF_write_byte
                                    1-   46     	extern	_RF_wr_buffer
                                    1-   47     	extern	_RF_Write_Ack_Payload
                                    1-   48     	extern	_RF_spi_wrd
                                    1-   49     	extern	_RF_Soft_Rst
                                    1-   50     	extern	_RF_SendPack
                                    1-   51     	extern	_RF_ReceivePack
                                    1-   52     	extern	_RF_Read_Status
                                    1-   53     	extern	_RF_read_byte
                                    1-   54     	extern	_RF_read_buffer
                                    1-   55     	extern	_RF_Operation
                                    1-   56     	extern	_RF_ModeSwitch
                                    1-   57     	extern	_RF_Get_RSSI
                                    1-   58     	extern	_RF_Get_Chip_ID
                                    1-   59     	extern	_RF_Flush_Tx
                                    1-   60     	extern	_RF_Flush_Rx
                                    1-   61     	extern	_RF_Configure_Reg
                                    1-   62     	extern	_RF_Clear_All_Irq
                                    1-   63     	extern	_RF_Change_Pwr
                                    1-   64     	extern	_RF_Change_CH
                                    1-   65     	extern	_RF_ChangeAddr_Reg
                                    1-   66     	extern	_RF_CE_Low
                                    1-   67     	extern	_RF_CE_High_Pulse
                                    1-   68     	extern	_RF_CE_High
                                    1-   69     	extern	_RF_Bank_Switch
                                    1-   70     	extern	_clear_ram
                                    1-   71     	extern	_multi_16b
                                    1-   72     	extern	_T0MD
                                    1-   73     	extern	_PCON1
                                    1-   74     	extern	_CMPCR
                                    1-   75     	extern	_BODCON
                                    1-   76     	extern	_PS0CV
                                    1-   77     	extern	_APHCON
                                    1-   78     	extern	_IOSTB
                                    1-   79     	extern	_IOSTA
                                    1-   80     	extern	_PWM5RH
                                    1-   81     	extern	_PWM5DUTY
                                    1-   82     	extern	_P5CR1
                                    1-   83     	extern	_PWM4DUTY
                                    1-   84     	extern	_P4CR1
                                    1-   85     	extern	_PS3CV
                                    1-   86     	extern	_PWM3DUTY
                                    1-   87     	extern	_T3CR2
                                    1-   88     	extern	_T3CR1
                                    1-   89     	extern	_TMR3
                                    1-   90     	extern	_OSCCR
                                    1-   91     	extern	_PWM2DUTY
                                    1-   92     	extern	_P2CR1
                                    1-   93     	extern	_TBHD
                                    1-   94     	extern	_TBHP
                                    1-   95     	extern	_IRCR
                                    1-   96     	extern	_BZ1CR
                                    1-   97     	extern	_PS1CV
                                    1-   98     	extern	_PWM1DUTY
                                    1-   99     	extern	_T1CR2
                                    1-  100     	extern	_T1CR1
                                    1-  101     	extern	_TMR1
                                    1-  102     	extern	_TM34RH
                                    1-  103     	extern	_TMRH
                                    1-  104     	extern	_PCHBUF
                                    1-  105     	extern	_STATUS
                                    1-  106     	extern	_PCL
                                    1-  107     	extern	_TMR0
                                    1-  108     	extern	_SLEEP_STATUS
                                    1-  109     	extern	_INTE2bits
                                    1-  110     	extern	_RFCbits
                                    1-  111     	extern	_INTEDGbits
                                    1-  112     	extern	_AWUCONbits
                                    1-  113     	extern	_INTFbits
                                    1-  114     	extern	_INTEbits
                                    1-  115     	extern	_BPHCONbits
                                    1-  116     	extern	_ABPLCONbits
                                    1-  117     	extern	_BWUCONbits
                                    1-  118     	extern	_PCONbits
                                    1-  119     	extern	_PORTBbits
                                    1-  120     	extern	_PORTAbits
                                    1-  121     	extern	__nyc_ny8_startup
                                    1-  122     ;--------------------------------------------------------
                                    1-  123     ; global declarations
                                    1-  124     ;--------------------------------------------------------
                                    1-  125     	extern	_isr
                                    1-  126     	extern	_main
                                    1-  127     	extern	_send_data
                                    1-  128     	extern	_sleep_count
                                    1-  129     	extern	_go_to_sleep
                                    1-  130     	extern	_close_WDT
                                    1-  131     	extern	_open_WDT
                                    1-  132     	extern	_wake_up_init
                                    1-  133     	extern	_INTE2
                                    1-  134     	extern	_RFC
                                    1-  135     	extern	_INTEDG
                                    1-  136     	extern	_AWUCON
                                    1-  137     	extern	_INTF
                                    1-  138     	extern	_INTE
                                    1-  139     	extern	_BPHCON
                                    1-  140     	extern	_ABPLCON
                                    1-  141     	extern	_BWUCON
                                    1-  142     	extern	_PCON
                                    1-  143     	extern	_PORTB
                                    1-  144     	extern	_PORTA
                                    1-  145     	extern	_sleep_conut_2
                                    1-  146     	extern	_sleep_conut_1
                                    1-  148     	extern PSAVE
                                    1-  149     	extern SSAVE
                                    1-  150     	extern WSAVE
                                    1-  151     	extern STK12
                                    1-  152     	extern ___STK12
                                    1-  153     	extern STK11
                                    1-  154     	extern ___STK11
                                    1-  155     	extern STK10
                                    1-  156     	extern ___STK10
                                    1-  157     	extern STK09
                                    1-  158     	extern ___STK09
                                    1-  159     	extern STK08
                                    1-  160     	extern ___STK08
                                    1-  161     	extern STK07
                                    1-  162     	extern ___STK07
                                    1-  163     	extern STK06
                                    1-  164     	extern ___STK06
                                    1-  165     	extern STK05
                                    1-  166     	extern ___STK05
                                    1-  167     	extern STK04
                                    1-  168     	extern ___STK04
                                    1-  169     	extern STK03
                                    1-  170     	extern ___STK03
                                    1-  171     	extern STK02
                                    1-  172     	extern ___STK02
                                    1-  173     	extern STK01
                                    1-  174     	extern ___STK01
                                    1-  175     	extern STK00
                                    1-  176     	extern ___STK00
                                    1-  178     .segment "share_bank"
     0000                           1-  179     PSAVE:
                                    1-  180     	.res 1
                                    1-  181     .segment "share_bank"
     0000                           1-  182     SSAVE:
                                    1-  183     	.res 1
                                    1-  184     .segment "share_bank"
     0000                           1-  185     WSAVE:
                                    1-  186     	.res 1
                                    1-  187     .segment "share_bank"
     0000                           1-  188     ___STK12:
     0000                           1-  189     STK12:
                                    1-  190     	.res 1
                                    1-  191     .segment "share_bank"
     0000                           1-  192     ___STK11:
     0000                           1-  193     STK11:
                                    1-  194     	.res 1
                                    1-  195     .segment "share_bank"
     0000                           1-  196     ___STK10:
     0000                           1-  197     STK10:
                                    1-  198     	.res 1
                                    1-  199     .segment "share_bank"
     0000                           1-  200     ___STK09:
     0000                           1-  201     STK09:
                                    1-  202     	.res 1
                                    1-  203     .segment "share_bank"
     0000                           1-  204     ___STK08:
     0000                           1-  205     STK08:
                                    1-  206     	.res 1
                                    1-  207     .segment "share_bank"
     0000                           1-  208     ___STK07:
     0000                           1-  209     STK07:
                                    1-  210     	.res 1
                                    1-  211     .segment "share_bank"
     0000                           1-  212     ___STK06:
     0000                           1-  213     STK06:
                                    1-  214     	.res 1
                                    1-  215     .segment "share_bank"
     0000                           1-  216     ___STK05:
     0000                           1-  217     STK05:
                                    1-  218     	.res 1
                                    1-  219     .segment "share_bank"
     0000                           1-  220     ___STK04:
     0000                           1-  221     STK04:
                                    1-  222     	.res 1
                                    1-  223     .segment "share_bank"
     0000                           1-  224     ___STK03:
     0000                           1-  225     STK03:
                                    1-  226     	.res 1
                                    1-  227     .segment "share_bank"
     0000                           1-  228     ___STK02:
     0000                           1-  229     STK02:
                                    1-  230     	.res 1
                                    1-  231     .segment "share_bank"
     0000                           1-  232     ___STK01:
     0000                           1-  233     STK01:
                                    1-  234     	.res 1
                                    1-  235     .segment "share_bank"
     0000                           1-  236     ___STK00:
     0000                           1-  237     STK00:
                                    1-  238     	.res 1
                                    1-  240     ;--------------------------------------------------------
                                    1-  241     ; global definitions
                                    1-  242     ;--------------------------------------------------------
                                    1-  243     ;--------------------------------------------------------
                                    1-  244     ; absolute symbol definitions
                                    1-  245     ;--------------------------------------------------------
                                    1-  246     ;--------------------------------------------------------
                                    1-  247     ; compiler-defined variables
                                    1-  248     ;--------------------------------------------------------
                                    1-  249     .segment "uninit"
     0000                           1-  250     r0x1005:
                                    1-  251     	.res	1
                                    1-  252     .segment "uninit"
     0000                           1-  253     r0x1006:
                                    1-  254     	.res	1
                                    1-  255     .segment "uninit"
     0000                           1-  256     r0x1007:
                                    1-  257     	.res	1
                                    1-  258     .segment "uninit"
     0000                           1-  259     r0x1008:
                                    1-  260     	.res	1
                                    1-  261     .segment "uninit"
     0000                           1-  262     r0x1009:
                                    1-  263     	.res	1
                                    1-  264     .segment "uninit"
     0000                           1-  265     ___sdcc_saved_fsr:
                                    1-  266     	.res	1
                                    1-  268     .segment "uninit"
     0000                           1-  269     ___sdcc_saved_stk00:
                                    1-  270     	.res	1
                                    1-  272     .segment "uninit"
     0000                           1-  273     ___sdcc_saved_stk01:
                                    1-  274     	.res	1
                                    1-  276     ;--------------------------------------------------------
                                    1-  277     ; initialized data
                                    1-  278     ;--------------------------------------------------------
                                    1-  280     .segment "idata"
     0000                           1-  281     _sleep_conut_1:
     0000 0000                      1-  284     	dw	0x00	; 0
                                    1-  287     .segment "idata"
     0000                           1-  288     _sleep_conut_2:
     0000 0000                      1-  291     	dw	0x00	; 0
                                    1-  293     ;--------------------------------------------------------
                                    1-  294     ; initialized absolute data
                                    1-  295     ;--------------------------------------------------------
                                    1-  296     ;--------------------------------------------------------
                                    1-  297     ; overlayable items in internal ram 
                                    1-  298     ;--------------------------------------------------------
                                    1-  299     ;	udata_ovr
                                    1-  300     ;--------------------------------------------------------
                                    1-  301     ; reset vector 
                                    1-  302     ;--------------------------------------------------------
                                    1-  303     ORG	0x0000
     0000 3rrr                      1-  304     	LGOTO	__nyc_ny8_startup
                                    1-  305     ;--------------------------------------------------------
                                    1-  306     ; interrupt and initialization code
                                    1-  307     ;--------------------------------------------------------
                                    1-  308     ORG 0x0008
                                    1-  309     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  311     .segment "code"
     0000                           1-  312     __sdcc_interrupt:
                                    1-  313     ;***
                                    1-  314     ;  pBlock Stats: dbName = I
                                    1-  315     ;***
                                    1-  316     ;functions called:
                                    1-  317     ;   _open_WDT
                                    1-  318     ;   _open_WDT
                                    1-  319     ;2 compiler assigned registers:
                                    1-  320     ;   STK00
                                    1-  321     ;   STK01
                                    1-  322     ;; Starting pCode block
     0000                           1-  323     _isr:
                                    1-  324     ; 0 exit points
                                    1-  325     	.line	139, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  326     	MOVAR	WSAVE
     0001 1503                      1-  327     	SWAPR	STATUS,W
     0002 0283                      1-  328     	CLRR	STATUS
     0003 00rr                      1-  329     	MOVAR	SSAVE
     0004 010A                      1-  330     	MOVR	PCHBUF,W
     0005 028A                      1-  331     	CLRR	PCHBUF
     0006 00rr                      1-  332     	MOVAR	PSAVE
     0007 0104                      1-  333     	MOVR	FSR,W
                                    1-  334     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-  109 m1      .banksel ram_address
     0009 00rr                      1-  335     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  336     	MOVR	STK00,W
                                    1-  337     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-  109 m1      .banksel ram_address
     000C 00rr                      1-  338     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  339     	MOVR	STK01,W
                                    1-  340     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-  109 m1      .banksel ram_address
     000F 00rr                      1-  341     	MOVAR	___sdcc_saved_stk01
                                    1-  342     	.line	141, "main.c"; 	if(INTFbits.PABIF)
     0010 08rr                      1-  343     	BTRSS	_INTFbits,1
                                    1-  344     	MGOTO	_02075_DS_
     0011 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  345     	.line	143, "main.c"; 	open_WDT();
                                    1-  346     	MCALL	_open_WDT
     0012 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  347     	.line	144, "main.c"; 	INTFbits.PABIF = 0;
     0013 21FD                      1-  348     	MOVIA	0xfd
     0014 00rr                      1-  349     	MOVAR	(_INTFbits + 0)
     0015                           1-  350     _02075_DS_:
                                    1-  351     	.line	146, "main.c"; 	}
                                    1-  352     	BANKSEL	___sdcc_saved_stk01
     0015 rrrr                      3-  109 m1      .banksel ram_address
     0016 01rr                      1-  353     	MOVR	___sdcc_saved_stk01,W
     0017 00rr                      1-  354     	MOVAR	STK01
                                    1-  355     	BANKSEL	___sdcc_saved_stk00
     0018 rrrr                      3-  109 m1      .banksel ram_address
     0019 01rr                      1-  356     	MOVR	___sdcc_saved_stk00,W
     001A 00rr                      1-  357     	MOVAR	STK00
                                    1-  358     	BANKSEL	___sdcc_saved_fsr
     001B rrrr                      3-  109 m1      .banksel ram_address
     001C 01rr                      1-  359     	MOVR	___sdcc_saved_fsr,W
     001D 0084                      1-  360     	MOVAR	FSR
     001E 01rr                      1-  361     	MOVR	PSAVE,W
     001F 008A                      1-  362     	MOVAR	PCHBUF
     0020 0283                      1-  363     	CLRR	STATUS
     0021 15rr                      1-  364     	SWAPR	SSAVE,W
     0022 0083                      1-  365     	MOVAR	STATUS
     0023 15rr                      1-  366     	SWAPR	WSAVE,F
     0024 15rr                      1-  367     	SWAPR	WSAVE,W
     0025                           1-  368     END_OF_INTERRUPT:
     0025 0011                      1-  369     	RETIE	
                                    1-  371     ;--------------------------------------------------------
                                    1-  372     ; code
                                    1-  373     ;--------------------------------------------------------
                                    1-  374     ; code_main	code
                                    1-  375     ;***
                                    1-  376     ;  pBlock Stats: dbName = M
                                    1-  377     ;***
                                    1-  378     ;has an exit
                                    1-  379     ;functions called:
                                    1-  380     ;   _key_init
                                    1-  381     ;   _CS1630_Init
                                    1-  382     ;   _open_WDT
                                    1-  383     ;   _key_init
                                    1-  384     ;   _Check_Keydown
                                    1-  385     ;   _send_data
                                    1-  386     ;   _sleep_count
                                    1-  387     ;   _key_init
                                    1-  388     ;   _CS1630_Init
                                    1-  389     ;   _open_WDT
                                    1-  390     ;   _key_init
                                    1-  391     ;   _Check_Keydown
                                    1-  392     ;   _send_data
                                    1-  393     ;   _sleep_count
                                    1-  394     ;1 compiler assigned register :
                                    1-  395     ;   r0x1009
                                    1-  396     ;; Starting pCode block
                                    1-  397     .segment "code"; module=main, function=_main
                                    1-  399     ;local variable name mapping:
     0000                           1-  401     _main:
                                    1-  402     ; 2 exit points
                                    1-  403     	.line	115, "main.c"; 	DISI();
     0000 0013                      1-  404     	DISI
                                    1-  405     	.line	116, "main.c"; 	key_init();
                                    1-  406     	MCALL	_key_init
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  407     	.line	117, "main.c"; 	CS1630_Init();
                                    1-  408     	MCALL	_CS1630_Init
     0002 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  409     	.line	118, "main.c"; 	open_WDT();
                                    1-  410     	MCALL	_open_WDT
     0003 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  411     	.line	119, "main.c"; 	ENI();
     0004 0004                      1-  412     	ENI
     0005                           1-  413     _02068_DS_:
                                    1-  414     	.line	125, "main.c"; 	CLRWDT();
     0005 0002                      1-  415     	clrwdt
                                    1-  416     	.line	126, "main.c"; 	key_init();
                                    1-  417     	MCALL	_key_init
     0006 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  418     	.line	127, "main.c"; 	sCodeValue = Check_Keydown();
                                    1-  419     	MCALL	_Check_Keydown
     0007 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  420     	BANKSEL	r0x1009
     0008 rrrr                      3-  109 m1      .banksel ram_address
     0009 00rr                      1-  421     	MOVAR	r0x1009
                                    1-  422     	.line	128, "main.c"; 	if(sCodeValue != 0)
     000A 01rr                      1-  423     	MOVR	r0x1009,W
     000B 0D03                      1-  424     	BTRSC	STATUS,2
                                    1-  425     	MGOTO	_02066_DS_
     000C 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  426     	.line	130, "main.c"; 	send_data(sCodeValue);
     000D 01rr                      1-  427     	MOVR	r0x1009,W
                                    1-  428     	MCALL	_send_data
     000E 2rrr                      3-   65 m1      LCALL rom_address
     000F                           1-  429     _02066_DS_:
                                    1-  430     	.line	132, "main.c"; 	sleep_count(sCodeValue);
                                    1-  431     	BANKSEL	r0x1009
     000F rrrr                      3-  109 m1      .banksel ram_address
     0010 01rr                      1-  432     	MOVR	r0x1009,W
                                    1-  433     	MCALL	_sleep_count
     0011 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  434     	.line	133, "main.c"; 	sCodeValue = 0;
                                    1-  435     	MGOTO	_02068_DS_
     0012 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  436     	.line	135, "main.c"; 	}
                                    1-  437     	RETURN	
     0013 0010                      3-   39 m1      ret
                                    1-  438     ; exit point of _main
                                    1-  440     ;***
                                    1-  441     ;  pBlock Stats: dbName = C
                                    1-  442     ;***
                                    1-  443     ;has an exit
                                    1-  444     ;functions called:
                                    1-  445     ;   _key_init
                                    1-  446     ;   _send_ble_packet
                                    1-  447     ;   _send_ble_packet
                                    1-  448     ;   _delay_250ms
                                    1-  449     ;   _delay_ms
                                    1-  450     ;   _key_init
                                    1-  451     ;   _key_init
                                    1-  452     ;   _send_ble_packet
                                    1-  453     ;   _send_ble_packet
                                    1-  454     ;   _delay_250ms
                                    1-  455     ;   _delay_ms
                                    1-  456     ;   _key_init
                                    1-  457     ;4 compiler assigned registers:
                                    1-  458     ;   r0x1005
                                    1-  459     ;   r0x1006
                                    1-  460     ;   r0x1007
                                    1-  461     ;   r0x1008
                                    1-  462     ;; Starting pCode block
                                    1-  463     .segment "code"; module=main, function=_send_data
                                    1-  465     ;local variable name mapping:
     0000                           1-  469     _send_data:
                                    1-  470     ; 2 exit points
                                    1-  471     	.line	76, "main.c"; 	void send_data(unsigned char CodeValue)
                                    1-  472     	BANKSEL	r0x1005
     0000 rrrr                      3-  109 m1      .banksel ram_address
     0001 00rr                      1-  473     	MOVAR	r0x1005
                                    1-  474     	.line	80, "main.c"; 	if(CodeValue != 0)
     0002 01rr                      1-  475     	MOVR	r0x1005,W
     0003 0D03                      1-  476     	BTRSC	STATUS,2
                                    1-  477     	MGOTO	_02041_DS_
     0004 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  478     	.line	82, "main.c"; 	key_init();
                                    1-  479     	MCALL	_key_init
     0005 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  480     	.line	83, "main.c"; 	KeyStatus = PORTA & 0xfc;
     0006 21FC                      1-  481     	MOVIA	0xfc
     0007 10rr                      1-  482     	ANDAR	_PORTA,W
                                    1-  483     	BANKSEL	r0x1006
     0008 rrrr                      3-  109 m1      .banksel ram_address
     0009 00rr                      1-  484     	MOVAR	r0x1006
                                    1-  485     	.line	84, "main.c"; 	KeyStatus_s = 1;
     000A 2101                      1-  486     	MOVIA	0x01
                                    1-  487     	BANKSEL	r0x1007
     000B rrrr                      3-  109 m1      .banksel ram_address
     000C 00rr                      1-  488     	MOVAR	r0x1007
     000D                           1-  489     _02036_DS_:
                                    1-  490     	.line	86, "main.c"; 	while(0xfc != (PORTA & 0xfC))
     000D 21FC                      1-  491     	MOVIA	0xfc
     000E 10rr                      1-  492     	ANDAR	_PORTA,W
                                    1-  493     	BANKSEL	r0x1008
     000F rrrr                      3-  109 m1      .banksel ram_address
     0010 00rr                      1-  494     	MOVAR	r0x1008
     0011 01rr                      1-  495     	MOVR	r0x1008,W
     0012 24FC                      1-  496     	XORIA	0xfc
     0013 0903                      1-  497     	BTRSS	STATUS,2
                                    1-  498     	MGOTO	_02059_DS_
     0014 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  499     	MGOTO	_02041_DS_
     0015 3rrr                      3-   62 m1      LGOTO rom_address
     0016                           1-  500     _02059_DS_:
                                    1-  501     	.line	89, "main.c"; 	send_ble_packet(CodeValue);
                                    1-  502     	BANKSEL	r0x1005
     0016 rrrr                      3-  109 m1      .banksel ram_address
     0017 01rr                      1-  503     	MOVR	r0x1005,W
                                    1-  504     	MCALL	_send_ble_packet
     0018 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  505     	.line	94, "main.c"; 	if(KeyStatus_s == 1)
                                    1-  506     	BANKSEL	r0x1007
     0019 rrrr                      3-  109 m1      .banksel ram_address
     001A 01rr                      1-  507     	MOVR	r0x1007,W
     001B 2401                      1-  508     	XORIA	0x01
     001C 0903                      1-  509     	BTRSS	STATUS,2
                                    1-  510     	MGOTO	_02033_DS_
     001D 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  511     	.line	96, "main.c"; 	send_ble_packet(CodeValue);
                                    1-  512     	BANKSEL	r0x1005
     001E rrrr                      3-  109 m1      .banksel ram_address
     001F 01rr                      1-  513     	MOVR	r0x1005,W
                                    1-  514     	MCALL	_send_ble_packet
     0020 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  515     	.line	98, "main.c"; 	KeyStatus_s = 0;
                                    1-  516     	BANKSEL	r0x1007
     0021 rrrr                      3-  109 m1      .banksel ram_address
     0022 02rr                      1-  517     	CLRR	r0x1007
                                    1-  518     	.line	99, "main.c"; 	PB4 = 0;
                                    1-  519     	BANKSEL	_PORTB
     0023 rrrr                      3-  109 m1      .banksel ram_address
     0024 1Err                      1-  520     	BCR	_PORTB,4
                                    1-  521     	.line	100, "main.c"; 	delay_250ms();
                                    1-  522     	MCALL	_delay_250ms
     0025 2rrr                      3-   65 m1      LCALL rom_address
     0026                           1-  523     _02033_DS_:
                                    1-  524     	.line	102, "main.c"; 	PB4 = 0;
                                    1-  525     	BANKSEL	_PORTB
     0026 rrrr                      3-  109 m1      .banksel ram_address
     0027 1Err                      1-  526     	BCR	_PORTB,4
                                    1-  527     	.line	103, "main.c"; 	delay_ms(50);
     0028 2132                      1-  528     	MOVIA	0x32
                                    1-  529     	MCALL	_delay_ms
     0029 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  530     	.line	104, "main.c"; 	key_init();
                                    1-  531     	MCALL	_key_init
     002A 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  532     	.line	105, "main.c"; 	if(KeyStatus != (PORTA & 0xfc)) // 若与一开始按的不是同一个按键则退出重新检测
     002B 21FC                      1-  533     	MOVIA	0xfc
     002C 10rr                      1-  534     	ANDAR	_PORTA,W
                                    1-  535     	BANKSEL	r0x1008
     002D rrrr                      3-  109 m1      .banksel ram_address
     002E 00rr                      1-  536     	MOVAR	r0x1008
     002F 01rr                      1-  537     	MOVR	r0x1008,W
                                    1-  538     	BANKSEL	r0x1006
     0030 rrrr                      3-  109 m1      .banksel ram_address
     0031 12rr                      1-  539     	XORAR	r0x1006,W
     0032 0903                      1-  540     	BTRSS	STATUS,2
                                    1-  541     	MGOTO	_02041_DS_
     0033 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  542     	MGOTO	_02036_DS_
     0034 3rrr                      3-   62 m1      LGOTO rom_address
     0035                           1-  543     _02041_DS_:
                                    1-  544     	.line	109, "main.c"; 	}
                                    1-  545     	RETURN	
     0035 0010                      3-   39 m1      ret
                                    1-  546     ; exit point of _send_data
                                    1-  548     ;***
                                    1-  549     ;  pBlock Stats: dbName = C
                                    1-  550     ;***
                                    1-  551     ;has an exit
                                    1-  552     ;functions called:
                                    1-  553     ;   _go_to_sleep
                                    1-  554     ;   _go_to_sleep
                                    1-  555     ;1 compiler assigned register :
                                    1-  556     ;   r0x1005
                                    1-  557     ;; Starting pCode block
                                    1-  558     .segment "code"; module=main, function=_sleep_count
                                    1-  560     ;local variable name mapping:
     0000                           1-  562     _sleep_count:
                                    1-  563     ; 2 exit points
                                    1-  564     	.line	53, "main.c"; 	void sleep_count(unsigned char s_sleep_status)
                                    1-  565     	BANKSEL	r0x1005
     0000 rrrr                      3-  109 m1      .banksel ram_address
     0001 00rr                      1-  566     	MOVAR	r0x1005
                                    1-  567     	.line	55, "main.c"; 	if(s_sleep_status != 0) // 有按键被按下，重新计时
     0002 01rr                      1-  568     	MOVR	r0x1005,W
     0003 0D03                      1-  569     	BTRSC	STATUS,2
                                    1-  570     	MGOTO	_02022_DS_
     0004 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  571     	.line	57, "main.c"; 	sleep_conut_1 = 0;
                                    1-  572     	BANKSEL	_sleep_conut_1
     0005 rrrr                      3-  109 m1      .banksel ram_address
     0006 02rr                      1-  573     	CLRR	_sleep_conut_1
                                    1-  574     	.line	58, "main.c"; 	sleep_conut_2 = 0;
                                    1-  575     	BANKSEL	_sleep_conut_2
     0007 rrrr                      3-  109 m1      .banksel ram_address
     0008 02rr                      1-  576     	CLRR	_sleep_conut_2
     0009                           1-  577     _02022_DS_:
                                    1-  578     	.line	61, "main.c"; 	sleep_conut_1 ++;
                                    1-  579     	BANKSEL	_sleep_conut_1
     0009 rrrr                      3-  109 m1      .banksel ram_address
     000A 01rr                      1-  580     	MOVR	_sleep_conut_1,W
                                    1-  581     	BANKSEL	r0x1005
     000B rrrr                      3-  109 m1      .banksel ram_address
     000C 00rr                      1-  582     	MOVAR	r0x1005
     000D 05rr                      1-  583     	INCR	r0x1005,W
                                    1-  584     	BANKSEL	_sleep_conut_1
     000E rrrr                      3-  109 m1      .banksel ram_address
     000F 00rr                      1-  585     	MOVAR	_sleep_conut_1
                                    1-  586     ;;unsigned compare: left < lit(0xFF=255), size=1
                                    1-  587     	.line	63, "main.c"; 	if(sleep_conut_1 >= 255)
     0010 21FF                      1-  588     	MOVIA	0xff
     0011 04rr                      1-  589     	SUBAR	_sleep_conut_1,W
     0012 0803                      1-  590     	BTRSS	STATUS,0
                                    1-  591     	MGOTO	_02024_DS_
     0013 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  592     	.line	65, "main.c"; 	sleep_conut_1 = 0;
     0014 02rr                      1-  593     	CLRR	_sleep_conut_1
                                    1-  594     	.line	66, "main.c"; 	sleep_conut_2 ++;
                                    1-  595     	BANKSEL	_sleep_conut_2
     0015 rrrr                      3-  109 m1      .banksel ram_address
     0016 01rr                      1-  596     	MOVR	_sleep_conut_2,W
                                    1-  597     	BANKSEL	r0x1005
     0017 rrrr                      3-  109 m1      .banksel ram_address
     0018 00rr                      1-  598     	MOVAR	r0x1005
     0019 05rr                      1-  599     	INCR	r0x1005,W
                                    1-  600     	BANKSEL	_sleep_conut_2
     001A rrrr                      3-  109 m1      .banksel ram_address
     001B 00rr                      1-  601     	MOVAR	_sleep_conut_2
                                    1-  602     ;;unsigned compare: left < lit(0x20=32), size=1
     001C                           1-  603     _02024_DS_:
                                    1-  604     	.line	69, "main.c"; 	if(sleep_conut_2 >= 32) // 5s
     001C 2120                      1-  605     	MOVIA	0x20
                                    1-  606     	BANKSEL	_sleep_conut_2
     001D rrrr                      3-  109 m1      .banksel ram_address
     001E 04rr                      1-  607     	SUBAR	_sleep_conut_2,W
     001F 0803                      1-  608     	BTRSS	STATUS,0
                                    1-  609     	MGOTO	_02027_DS_
     0020 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  610     	.line	71, "main.c"; 	sleep_conut_2 = 0;
     0021 02rr                      1-  611     	CLRR	_sleep_conut_2
                                    1-  612     	.line	72, "main.c"; 	go_to_sleep();
                                    1-  613     	MCALL	_go_to_sleep
     0022 2rrr                      3-   65 m1      LCALL rom_address
     0023                           1-  614     _02027_DS_:
                                    1-  615     	.line	74, "main.c"; 	}
                                    1-  616     	RETURN	
     0023 0010                      3-   39 m1      ret
                                    1-  617     ; exit point of _sleep_count
                                    1-  619     ;***
                                    1-  620     ;  pBlock Stats: dbName = C
                                    1-  621     ;***
                                    1-  622     ;has an exit
                                    1-  623     ;functions called:
                                    1-  624     ;   _close_WDT
                                    1-  625     ;   _wake_up_init
                                    1-  626     ;   _close_WDT
                                    1-  627     ;   _wake_up_init
                                    1-  628     ;; Starting pCode block
                                    1-  629     .segment "code"; module=main, function=_go_to_sleep
     0000                           1-  631     _go_to_sleep:
                                    1-  632     ; 2 exit points
                                    1-  633     	.line	46, "main.c"; 	close_WDT();
                                    1-  634     	MCALL	_close_WDT
     0000 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  635     	.line	47, "main.c"; 	wake_up_init();
                                    1-  636     	MCALL	_wake_up_init
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  637     	.line	48, "main.c"; 	UPDATE_REG(PORTA);
     0002 01rr                      1-  638     	MOVR	_PORTA,F
                                    1-  639     	.line	49, "main.c"; 	INTF = 0x00;
     0003 02rr                      1-  640     	CLRR	_INTF
                                    1-  641     	.line	50, "main.c"; 	SLEEP();
     0004 0001                      1-  642     	sleep
                                    1-  643     	.line	51, "main.c"; 	}
                                    1-  644     	RETURN	
     0005 0010                      3-   39 m1      ret
                                    1-  645     ; exit point of _go_to_sleep
                                    1-  647     ;***
                                    1-  648     ;  pBlock Stats: dbName = C
                                    1-  649     ;***
                                    1-  650     ;has an exit
                                    1-  651     ;; Starting pCode block
                                    1-  652     .segment "code"; module=main, function=_close_WDT
     0000                           1-  654     _close_WDT:
                                    1-  655     ; 2 exit points
                                    1-  656     	.line	40, "main.c"; 	PCON &= ~C_WDT_En;
     0000 1Frr                      1-  657     	BCR	_PCON,7
                                    1-  658     	.line	41, "main.c"; 	PCON &= ~C_LVR_En;
     0001 1Drr                      1-  659     	BCR	_PCON,3
                                    1-  660     	.line	42, "main.c"; 	}
                                    1-  661     	RETURN	
     0002 0010                      3-   39 m1      ret
                                    1-  662     ; exit point of _close_WDT
                                    1-  664     ;***
                                    1-  665     ;  pBlock Stats: dbName = C
                                    1-  666     ;***
                                    1-  667     ;has an exit
                                    1-  668     ;; Starting pCode block
                                    1-  669     .segment "code"; module=main, function=_open_WDT
     0000                           1-  671     _open_WDT:
                                    1-  672     ; 2 exit points
                                    1-  673     	.line	34, "main.c"; 	PCON |= C_WDT_En;	//使能看门狗
     0000 1Brr                      1-  674     	BSR	_PCON,7
                                    1-  675     	.line	35, "main.c"; 	PCON |= C_LVR_En;	//低压复位使能
     0001 19rr                      1-  676     	BSR	_PCON,3
                                    1-  677     	.line	36, "main.c"; 	}
                                    1-  678     	RETURN	
     0002 0010                      3-   39 m1      ret
                                    1-  679     ; exit point of _open_WDT
                                    1-  681     ;***
                                    1-  682     ;  pBlock Stats: dbName = C
                                    1-  683     ;***
                                    1-  684     ;has an exit
                                    1-  685     ;; Starting pCode block
                                    1-  686     .segment "code"; module=main, function=_wake_up_init
     0000                           1-  688     _wake_up_init:
                                    1-  689     ; 2 exit points
                                    1-  690     	.line	23, "main.c"; 	AWUCON = 0xfc;
     0000 21FC                      1-  691     	MOVIA	0xfc
     0001 00rr                      1-  692     	MOVAR	_AWUCON
                                    1-  693     	.line	24, "main.c"; 	BWUCON = 0x00;
     0002 02rr                      1-  694     	CLRR	_BWUCON
                                    1-  695     	.line	26, "main.c"; 	IOSTA = C_PA2_Input | C_PA3_Input | C_PA4_Input | C_PA5_Input | C_PA6_Input | C_PA7_Input;
     0003 21FC                      1-  696     	MOVIA	0xfc
     0004 000r                      1-  697     	IOST	_IOSTA
                                    1-  698     	.line	27, "main.c"; 	APHCON = 0b00100011; // 设置2、3、4、6、7上拉
     0005 2123                      1-  699     	MOVIA	0x23
     0006 000r                      1-  700     	IOST	_APHCON
                                    1-  701     	.line	28, "main.c"; 	INTE = C_INT_PABKey;
     0007 2102                      1-  702     	MOVIA	0x02
     0008 00rr                      1-  703     	MOVAR	_INTE
                                    1-  704     	.line	29, "main.c"; 	INTF = 0x00;
     0009 02rr                      1-  705     	CLRR	_INTF
                                    1-  706     	.line	30, "main.c"; 	}
                                    1-  707     	RETURN	
     000A 0010                      3-   39 m1      ret
                                    1-  708     ; exit point of _wake_up_init
                                    1-  711     ;	code size estimation:
                                    1-  712     ;	  136+   30 =   166 instructions (  392 byte)
                                    1-  714     	end

SYMBOL TABLE            TYPE     VALUE
__pin_count__           Constant 0000000E
__processor__           Constant 00800544
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000001
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8a054e.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A054E (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
